(define gitignore """
# Build stuff
common.cpp
cmake/*
CMakeLists.txt
build
dist
.DS_Store
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

""")

(define package_yaml """
id: %{1}
namespace: %{0}
shortname: Autogenerated Module
version: "0.1.0"
repo: https://github.com/%{0}/%{1}
entry-name: %{1}
dependencies:
  - Util@OffByOneStudios
  - Types@OffByOneStudios
  - Lisp@OffByOneStudios

include-directories: []
  
vendor-dependencies:
  x86_64-pc-windows-msvccoff: []
  x86_64-apple-macosx-macho: []
  x86_64-pc-linux-gnu: []

platform-dependencies:
  x86_64-pc-windows-msvccoff: []
  x86_64-apple-macosx-macho: []
  x86_64-pc-linux-gnu: []

platform-compile-flags:
  x86_64-pc-windows-msvccoff:
    - "/std:c++latest"
  x86_64-apple-macosx-macho: 
    - "-std=c++1z"
    - "-stdlib=libc++"
    - "-Wc++11-extensions"
  x86_64-pc-linux-gnu: 
    - "-std=gnu++1z"
    - "-pthread"
    - "-fpermissive"

platform-link-flags:
  x86_64-pc-windows-msvccoff:
    - "/ignore:4099"
    
platform-defines:
  x86_64-pc-windows-msvccoff:
    _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS: yes
  x86_64-apple-macosx-macho: {}
  x86_64-pc-linux-gnu: {}
  
artifacts:
  library:
    primary: yes
    kind: dll craft-types
    files:
      - src/**/*.*
  test:
    kind: test
    files:
      - test/**/*.*
  entry:
    kind: exe
    files:
      - entry/**/*.*
    
""")

(define main_cpp """
#include "%{0}/common.h"
#include "%{0}/all.h"

int main(int argc, char** argv)
{
  craft::types::boot();

  return 0;
}
""")

(define defines_h """
#pragma once

//
// Platform Dynamic Library
//
#if defined _WIN32 || defined __CYGWIN__
#ifdef __GNUC__
#define %{0}_EXPORTED_EXPORT __attribute__ ((dllexport))
#define %{0}_EXPORTED_IMPORT __attribute__ ((dllimport))
#else
#define %{0}_EXPORTED_EXPORT __declspec(dllexport)
#define %{0}_EXPORTED_IMPORT __declspec(dllimport)
#endif
#else
#if __GNUC__ >= 4
#define %{0}_EXPORTED_EXPORT __attribute__ ((visibility ("default")))
#define %{0}_EXPORTED_IMPORT
#else
#define %{0}_EXPORTED_EXPORT
#define %{0}_EXPORTED_IMPORT
#endif
#endif


//
// Engine Compile
//

#ifdef %{0}_DLL
#define %{0}_EXPORTED %{0}_EXPORTED_EXPORT
#else
#define %{0}_EXPORTED %{0}_EXPORTED_IMPORT
#endif
""")

(define common_h """
#pragma once

#include "defines.h"

// C++
#include <string>
#include <regex>
#include <fstream>
#include <iostream>
#include <sstream>
#include <utility>
#include <vector>
#include <map>
#include <algorithm>
#include <iterator>
#include <stack>
#include <queue>
#include <set>
#include <chrono>
#include <memory>
#include <type_traits>
#include <functional>


// Vendor
#include <spdlog/spdlog.h>
#include <spdlog/fmt/ostr.h>

// Deps
#include "util/all.h"
#include "types/core.h"
#include "lisp/lisp.h"

""")

(define all_h """
#pragma once
#include "%{1}/common.h"

namespace %{0} {
namespace %{1} 
{
  extern craft::lisp::BuiltinModuleDescription Builtin%{2};

  %{3}_EXPORTED void make_bindings(craft::instance<craft::lisp::Module>);
}}  
""")

(define all_cpp """
#include "%{1}/common.h"

#include "all.h"

using namespace craft;
using namespace craft::lisp;
using namespace craft::types;
using namespace %{0}::%{1};


#define lMM sem->builtin_implementMultiMethod
#define MoD "%{1}"

void %{0}::%{1}::make_bindings(craft::instance<craft::lisp::Module> ret)
{
  auto semantics = ret->require<lisp::CultSemantics>();

  lMM(MoD, []() { return instance<bool>::make();});
  
  return ret;
}

BuiltinModuleDescription %{0}::%{1}::Builtin%{2}("%{0}/%{1}", %{0}::%{1}::make_bindings);


#include "types/dll_entry.inc"
""")

(define generate (function (namespace name)
  (define exported (format "%{0}_%{1}" (string/upper namespace) (string/upper name)))
  (fs/write ".gitignore" gitignore)
  (fs/write "package.yaml" (format package_yaml (string/capital namespace) (string/capital name)))

  (fs/mkdir "entry")
  (fs/write "entry/main.cpp" (format main_cpp (string/lower name)))

  (fs/mkdir "test")
  (fs/write "test/main.cpp" (format main_cpp (string/lower name)))

  (fs/mkdir "src")
  (fs/mkdir (format "src/%{0}" (string/lower name)))

  (fs/write (format "src/%{0}/common.h" (string/lower name)) (format common_h (string/lower name)))
  (fs/write (format "src/%{0}/defines.h"(string/lower name)) (format defines_h exported))
  
  (fs/write (format "src/%{0}/all.h" (string/lower name)) (format all_h 
    (string/lower namespace) 
    (string/lower name)
    (string/capital name)
    exported
  ))
  (fs/write (format "src/%{0}/all.cpp" (string/lower name)) (format all_cpp
    (string/lower namespace) 
    (string/lower name)
    (string/capital name)
    exported
  ))
))

(define main (function ()
  (define argv (env/argv))
  (cond
    (fs/exists "package.yaml") 
    (print "Directory is already package.")
    (cond
      (!= (list/size argv) 4)
      (print "Usage: cult generate.cult <namespace> <packagename>")
      (generate (list/get argv 2) (list/get argv 3))
    )
  )
))

(main)

